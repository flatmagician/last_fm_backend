{"version":3,"sources":["../src/db.js"],"names":["Datastore","require","DBManager","constructor","db","filename","loadDatabase","error","console","log","insert","object","find","values","callback","artist","$in","err","docs","where","fn"],"mappings":"AAAA,MAAMA,YAAYC,QAAQ,MAAR,CAAlB;;AAEA,eAAe,MAAMC,SAAN,CAAgB;AAC3BC,kBAAc;AACV,aAAKC,EAAL,GAAU,IAAIJ,SAAJ,CAAc,EAAEK,UAAU,sBAAZ,EAAd,CAAV;AACA,aAAKD,EAAL,CAAQE,YAAR,CAAsBC,KAAD,IAAW;AAC5B,gBAAIA,KAAJ,EAAW;AACPC,wBAAQC,GAAR,CAAY,2DAA2DF,KAAvE;AACA,sBAAMA,KAAN;AACH;AACDC,oBAAQC,GAAR,CAAY,2CAAZ;AACH,SAND;AAOH;;AAED;AACAC,WAAOC,MAAP,EAAe;AACX,aAAKP,EAAL,CAAQM,MAAR,CAAeC,MAAf;AACAH,gBAAQC,GAAR,CAAY,oBAAZ;AACH;;AAED,UAAMG,IAAN,CAAWC,MAAX,EAAmBC,QAAnB,EAA6B;AACzB,eAAO,KAAKV,EAAL,CAAQQ,IAAR,CAAa;AAChBG,oBAAQ,EAAEC,KAAKH,MAAP;AADQ,SAAb,EAEJ,CAACI,GAAD,EAAMC,IAAN,KAAe;AACd,gBAAID,GAAJ,EAAS;AACLT,wBAAQD,KAAR,CAAcU,GAAd;AACH,aAFD,MAGK;AACD,uBAAOH,SAASI,IAAT,CAAP;AACH;AACJ,SATM,CAAP;AAUH;;AAED;AACAC,UAAMC,EAAN,EAAU;AACN,eAAO,KAAKhB,EAAL,CAAQe,KAAR,CAAcC,EAAd,CAAP;AACH;AAlC0B","file":"db.js","sourcesContent":["const Datastore = require(\"nedb\")\n\nexport default class DBManager {\n    constructor() {\n        this.db = new Datastore({ filename: \"./db/ArtistInfo.json\" })\n        this.db.loadDatabase((error) => {\n            if (error) {\n                console.log('FATAL: local database could not be loaded. Caused by: ' + error);\n                throw error;\n            }\n            console.log('INFO: local database loaded successfully.');\n        })\n    }\n\n    //object can also be an array\n    insert(object) {\n        this.db.insert(object)\n        console.log(\"inserting document\")\n    }\n\n    async find(values, callback) {\n        return this.db.find({\n            artist: { $in: values }\n        }, (err, docs) => {\n            if (err) {\n                console.error(err)\n            }\n            else {\n                return callback(docs)\n            }\n        })\n    }\n\n    //fn takes obj as a parameter, returns boolean\n    where(fn) {\n        return this.db.where(fn)\n    }\n}\n"]}
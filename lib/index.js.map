{"version":3,"sources":["../src/index.js"],"names":["axios","require","express","cheerio","cors","app","port","process","env","PORT","DBManager","db","options","req","res","header","send","get","headers","request","Request","user","category","period","rows","cols","out","getResponse","then","collage_info","push","artist_info","map","info","artist","find","bios","stored_artist_names","bio","name","result_bios","i","index","indexOf","Promise","rej","stored","fetchData","url","all","bios_complete","a","img_arr","album_info","entries","forEach","imgUrl","bioText","entry","insert","artist_url","catch","err","reject","console","log","result","listen","constructor","category_options","albums","artists","tracks","limit","api_key","r","post","data","topalbums","album","error","artistUrl","$","load","links","hasOwnProperty","attribs","src","wiki_result","$$","length","children","d","type","reduce","prev","cur","undefined"],"mappings":"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","file":"index.js","sourcesContent":["const axios = require(\"axios\");\nconst express = require(\"express\");\nconst cheerio = require(\"cheerio\");\nconst cors = require(\"cors\")\n\nconst app = express()\nconst port = process.env.PORT || 5000;\nimport DBManager from \"./db\"\n\nlet db = new DBManager()\n\napp.options('*', cors(), async (req, res) => {\n    res.header(\"Access-Control-Allow-Origin\", \"*\")\n    res.header(\"Access-Control-Allow-Methods\", [\"POST\", \"OPTIONS\"])\n    res.header(\"Access-Control-Allow-Headers\",\n        [\"Access-Control-Allow-Headers\", \"Origin\", \"Accept\", \"X-Requested-With\", \"Content-Type\", \"Access-Control-Request-Method\", \"Access-Control-Request-Headers\"])\n    res.send()\n})\napp.get('/meta_info', cors(), (req, res) => {\n    let headers = req.headers\n    let request = new Request(headers.user, headers.category, headers.period, headers.rows, headers.cols)\n    let out = []\n    request.getResponse()\n        .then(collage_info => {\n            out.push(collage_info)\n\n            const artist_info = collage_info.map(info => info.artist)\n            db.find(artist_info, (bios) => {\n                const stored_artist_names = bios.map(bio => bio.artist.name)\n                let result_bios = artist_info.map((info, i) => {\n                    const index = stored_artist_names.indexOf(info.name)\n                    if (index > -1) {\n                        return new Promise((res, rej) => {\n                            res({\n                                bio: bios[index],\n                                stored: true\n                            })\n                        })\n                    }\n                    else {\n                        return new Promise(async (res, rej) => {\n                            let bio = await fetchData(info.url)\n                            res({\n                                bio: bio,\n                                stored: false\n                            })\n                        })\n                    }\n                })\n                Promise.all(result_bios).then((bios_complete) => {\n                    let result_bios = bios_complete.map(a => a.bio)\n                    res.header(\"test\", \"test\")\n                    res.header(\"Access-Control-Allow-Origin\", \"*\")\n                    res.header(\"Access-Control-Allow-Methods\", [\"POST\", \"OPTIONS\"])\n                    res.header(\"Access-Control-Allow-Headers\",\n                        [\"Access-Control-Allow-Headers\", \"Origin\", \"Accept\", \"X-Requested-With\", \"Content-Type\", \"Access-Control-Request-Method\", \"Access-Control-Request-Headers\"])\n                    res.send({ img_arr: result_bios, album_info: out[0] })\n                    return bios_complete\n                }).then((bios_complete) => {\n                    const entries = []\n                    bios_complete.forEach((bio, index) => {\n                        if (bio.stored === false) {\n                            const info = out[0][index]\n                            entries.push({\n                                artist: info.artist,\n                                imgUrl: bio.bio.imgUrl,\n                                bioText: bio.bio.bioText\n                            })\n                        }\n                    })\n                    entries.forEach((entry) => {\n                        db.insert(entry)\n                    })\n                })\n            })\n        })\n})\n\napp.get('/album_info', async (req, res) => {\n    let headers = req.headers\n    fetchData(headers.artist_url)\n        .catch((err) => Promise.reject(err).then(console.log(err)).then(res.send(err)))\n        .then(\n            (result => res.send(result))\n        );\n\n})\n\napp.listen(port, () => console.log(`Example app listening on port ${port}!`))\n\nclass Request {\n    constructor(user, category, period, rows, cols) {\n        this.category_options = {\n            albums: \"getTopAlbums\",\n            artists: \"getTopArtists\",\n            tracks: \"getTopTracks\"\n        }\n\n        this.user = user;\n        this.category = this.category_options[category];\n        this.period = period;\n        this.rows = rows;\n        this.cols = cols;\n        this.limit = rows * cols;\n        this.api_key = \"57ee3318536b23ee81d6b27e36997cde\";\n        this.request = `http://ws.audioscrobbler.com/2.0/?method=user.${this.category}&user=${this.user}&api_key=${this.api_key}&format=json&period=${this.period}&limit=${this.limit}`;\n    }\n    async getResponse() {\n        try {\n            let r = await axios.post(this.request)\n            return r.data.topalbums.album\n        } catch (error) {\n            console.error(error)\n        }\n    }\n\n}\n\n\nasync function fetchData(artistUrl) {\n    const result = await axios.get(`${artistUrl}/+images/`)\n\n    let $ = cheerio.load(result.data);\n    let links = $('.image-list-item-wrapper a img')\n    let imgUrl\n    if (links[0] != null && links[0].hasOwnProperty(\"attribs\")) {\n        imgUrl = links[0].attribs.src\n    }\n    else {\n        imgUrl = null\n    }\n\n\n    const wiki_result = await axios.get(`${artistUrl}/+wiki/`)\n\n\n    let $$ = cheerio.load(wiki_result.data)\n    let bio = $$('.wiki-content p')\n\n    if (typeof bio === \"undefined\" || bio.length === 0) {\n        return\n    }\n    let bioText = bio[0].children.map(d => {\n        if (d.type !== \"text\") {\n            if (d.type === \"tag\") {\n                if (typeof d.children[0] === \"undefined\") {\n                    return `\\t`\n                }\n                return d.children[0].data\n            }\n            else {\n                return d.children[0].data\n            }\n        }\n        else {\n            return d.data\n        }\n    })\n    bioText = bioText.reduce((prev, cur) => {\n        if (cur !== undefined) {\n            return prev + cur\n        }\n        else {\n            return prev\n        }\n    }, \"\")\n\n    return {\n        imgUrl: imgUrl,\n        bioText: bioText\n    }\n}\n\n//user can choose between small/medium/large/extralarge images\n//should be able to place album name, artist name, playcount on image\n\n"]}